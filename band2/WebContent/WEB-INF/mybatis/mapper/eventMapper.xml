<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="event">

	<!-- 일정 등록시 참석자 명단 추가하는 매퍼 -->
	<select id="listFriend" parameterType="map" resultType="com.band.event.Member">
           SELECT memberNo, userId, name, grade FROM member_${url} ORDER BY grade ASC
    </select>


	<!-- 달력 형태로 출력해주는 매퍼 -->
	<select id="listMonthEvent" resultType="com.band.event.Event" parameterType="map">
	SELECT eventNo, eventName, content, eventPlace, TO_CHAR(fromDate,'MM/DD/YYYY') fromDate, 
		TO_CHAR(toDate,'MM/DD/YYYY') toDate, fromTime, toTime, eventType, eventFee, eventComplete
	FROM event_${url}
	<where>
		eventComplete='N' 
		<if test="group !='all' ">
		    AND eventType=#{group}
		</if>
        <![CDATA[
             AND ((fromDate>=#{start} AND fromDate<=#{end})
                OR (toDate>=#{start} AND toDate<=#{end}))
        ]]>             
   	  </where>
             ORDER BY fromDate ASC, eventNo DESC
	</select>
	

	
	<!-- 정보 불러오는 매퍼 -->
	<select id="readSchedule" resultType="com.band.event.Event" parameterType="Integer">
		SELECT eventNo, eventName, content, eventPlace, TO_CHAR(fromDate,'MM/DD/YYYY') fromDate, 
			TO_CHAR(toDate,'MM/DD/YYYY') toDate, fromTime, toTime, eventType, eventFee, eventComplete
		FROM event_${url}
		WHERE eventNo=#{eventNo}
	</select>



	<!-- 이벤트 목록 보기 (조회) -->
	<select id="listEvent" parameterType="map" resultType="com.band.event.Event">
	SELECT e.eventNo, eventName, content, eventPlace, TO_CHAR(fromDate,'MM/DD/YYYY') fromDate, 
		TO_CHAR(toDate,'MM/DD/YYYY') toDate, fromTime, toTime, eventType, eventFee, eventComplete, attend
	FROM event_${url} e FULL OUTER JOIN (SELECT eventNo ,COUNT(*) attend FROM eventAttend_${url} GROUP BY eventNo) a ON e.eventNo=a.eventNo
	ORDER BY eventNo DESC
	</select>
	
	
	
	<select id="memberCount" parameterType="map" resultType="Integer">
		 SELECT COUNT(*) FROM  member_${url}
	</select>
	
	
	
	
	
	
	<insert id="insertEvent" parameterType="com.band.event.Event">
		INSERT INTO event_${url}(eventNo, eventName, content, eventPlace, fullDate, fromDate, toDate, fromTime, toTime, eventType, eventFee)
		VALUES(event_seq_${url}.NEXTVAL, #{eventName}, #{content}, #{eventPlace}, #{fullDate}, 
					TO_DATE((SUBSTR(#{fullDate}, 1 ,10)), 'MM/DD/YYYY'), 
					TO_DATE((SUBSTR(#{fullDate}, -10 ,10)), 'MM/DD/YYYY'),
					#{fromTime}, #{toTime, jdbcType=VARCHAR}, #{eventType}, #{eventFee, jdbcType=VARCHAR}) 
	</insert>
	
	
	
	<insert id="insertAttend" parameterType="com.band.event.Event">
		INSERT INTO eventAttend_${url} (eventNo, memberNo)
			VALUES (#{eventNo}, #{memberNo})
	</insert>
	
	
	
	<!-- eventNo 가장 큰 값! (가장 최근에 추가된 값을 가져오기 위한) -->
	<select id="listEventMax" parameterType="String" resultType="Integer">
		SELECT MAX(eventNo) FROM event_${url}
	</select>
	
	
	
	<delete id="deleteEvent" parameterType="map">
		DELETE FROM event_${url} WHERE eventNo IN 
			<foreach item="eventNo" collection="list" 
						open="(" separator="," close=")">
				#{eventNo}			
			</foreach>
	</delete>



	<delete id="deleteSchedule" parameterType="map">
		DELETE FROM event_${url} WHERE eventNo=#{eventNo}			
	</delete>
	
	
	
	<update id="updateEvent" parameterType="com.band.event.Event">
		UPDATE event_${url}
			SET eventName=#{eventName}, content=#{content}, 
				eventPlace=#{eventPlace}, fullDate=#{fullDate}, 
				fromDate=TO_DATE((SUBSTR(#{fullDate}, 1 ,10)), 'MM/DD/YYYY'),
				toDate=TO_DATE((SUBSTR(#{fullDate}, -10 ,10)), 'MM/DD/YYYY'), 
				fromTime=#{fromTime}, toTime=#{toTime}, eventType=#{eventType},
				 eventFee=#{eventFee}				 
		WHERE eventNo=#{eventNo}
	</update>
	
	
	
	<update id="updateEventComplete" parameterType="map">
		UPDATE event_${url} SET eventComplete='Y' WHERE eventNo IN 
			<foreach item="eventNo" collection="list" 
						open="(" separator="," close=")">
				#{eventNo}
			</foreach>
	</update>
	
	
	
	<!-- 일정별 회원 리스트 -->
	<select id="eventAttendMember" parameterType="map" resultType="com.band.account.Event">
	SELECT evt.eventNo, att.memberNo, name, grade, tel, email
	FROM eventattend_${url} att JOIN event_${url} evt ON att.eventNo=evt.eventNo
                          	  JOIN member_${url} mem ON att.memberNo=mem.memberNo
	WHERE evt.eventNo=#{eventNo}
	ORDER BY grade
	</select>
	
	
</mapper>