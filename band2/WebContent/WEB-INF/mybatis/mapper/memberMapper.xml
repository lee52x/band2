<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
	<!-- 커뮤니티 회원가입 & 운영진의 회원정보 입력 -->
	<insert id="insertMember" parameterType="com.band.member.member.Member">
		INSERT INTO member_${url}(memberNo, userId, pwd, name, birth, address, gender, email, tel, joinDate, grade, groupUrl)
		VALUES(member_seq.NEXTVAL, #{userId, jdbcType = VARCHAR}, #{pwd, jdbcType = VARCHAR}, #{name}, #{birth}, #{address}, #{gender}, #{email}, #{tel}, #{joinDate}, #{grade}, #{url})
	</insert>

	<!-- 회원정보 목록 -->
	<select id="listMember" parameterType="map" resultType="com.band.member.member.Member">		
		SELECT memberNo, userId, name, email, TO_CHAR(birth, 'YYYY-MM-DD') birth, tel, address, gender,
			   grade, groupUrl, TO_CHAR(joinDate, 'YYYY-MM-DD') joinDate                       
		FROM member_${url}			
		ORDER BY memberNo ASC			
	</select>
	
	<!-- 회원정보 수정 -->
	<update id="updateMember" parameterType="com.band.member.member.Member">
		UPDATE member_${url} SET name = #{name}, email = #{email}, birth = #{birth}, tel = #{tel}, grade = #{grade}, address = #{address}, gender = #{gender}, joinDate = #{joinDate}
		WHERE memberNo = #{memberNo}
	</update>
	
	<!-- 회원정보 삭제 -->
	<delete id="deleteMember" parameterType="map">
		DELETE FROM member_${url} WHERE memberNo = #{memberNo} 
	</delete>
	
	<!-- 전체회원수 검색 -->
	<select id="selectTotalMember" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(memberNo), 0) FROM member_${url}
	</select>
	
	<!-- 커뮤니티회원수 검색 -->
	<select id="selectCommunityMember" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(userId), 0) FROM member_${url}
	</select>
	
	<!-- 새로 가입한 회원수 검색 -->
	<select id="recentJoinMemberCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(memberNo), 0) FROM member_${url}
	<![CDATA[
		WHERE joinDate >= (SELECT TO_CHAR(TRUNC(SYSDATE, 'MONTH'), 'YYYY-MM-DD') FROM dual)
		AND joinDate <= SYSDATE
	]]>
	</select>
	
	<!-- 현재 날짜가 속한 달의 시작일 검색  -->
	<select id="selectFirstday" resultType="String">
		SELECT TO_CHAR(TRUNC(SYSDATE, 'MONTH'), 'YYYY-MM-DD') FROM dual
	</select>
	
	<!-- 현재 날짜 검색 -->
	<select id="selectToday" resultType="String">
		SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD') FROM dual
	</select>
	
	<!-- 모임 창립일 검색 -->
	<select id="selectFoundationday" parameterType="map" resultType="String">
		SELECT TO_CHAR(foundationDay, 'YYYY-MM-DD') FROM community WHERE groupURL = #{url}
	</select>
	
	<!-- 창립일 계산 -->
	<select id="countFoundationday" parameterType="map" resultType="Integer">
		SELECT ROUND(
			SYSDATE	- (SELECT foundationDay
			FROM community
		    WHERE groupURL = #{url})) - 1 FROM dual
	</select>
	
	<!-- 최근 가입한 회원정보 검색 -->
	<select id="listRecentJoinMember" parameterType="map" resultType="com.band.member.member.Member">
		SELECT ROWNUM, tb.* FROM (
			SELECT name, userId, TO_CHAR(joinDate, 'YYYY-MM-DD') joinDate FROM member_${url}
			ORDER BY joinDate DESC
	<![CDATA[
		) tb WHERE ROWNUM <= 5
	]]>
	</select>
	
	<!-- 이번달에 생일인 회원정보 검색 -->
	<select id="listBirthMember" parameterType="map" resultType="com.band.member.member.Member">
		SELECT ROWNUM, tb.* FROM (
			SELECT name, userId, TO_CHAR(birth, 'YYYY-MM-DD') birth FROM member_${url}
			WHERE TO_CHAR(birth, 'MM') = (SELECT TO_CHAR(TRUNC(SYSDATE, 'MONTH'), 'MM') birth FROM dual) 
			ORDER BY birth DESC
		<![CDATA[
		) tb WHERE ROWNUM <= 5
	]]>
	</select>
	
	<!-- 회의록 생성  -->
	<insert id="insertProceed" parameterType="com.band.member.proceed.Proceed">
		INSERT INTO proceedings(proceedNo, subject, content, proceedDate, place, attendee, saveFilename, OriginalFilename, note, groupURL)
		VALUES(proceed_seq.NEXTVAL, #{subject}, #{content}, #{proceedDate}, #{place, jdbcType = VARCHAR}, #{attendee},
		 #{saveFilename, jdbcType = VARCHAR}, #{OriginalFilename, jdbcType = VARCHAR}, #{note, jdbcType = VARCHAR}, #{url})
	</insert>

	<!-- 회의록 검색 조건  -->
	<sql id="where-list">		
		<if test="searchKey=='subject' ">
			INSTR(subject, #{searchValue}) &gt; 0
		</if>
		<if test="searchKey=='content' ">
			DBMS_LOB.INSTR(content, #{searchValue}) &gt; 0
		</if>
		<if test="searchKey=='created' ">
			TO_CHAR(proceeDate, 'YYYY-MM-DD') = #{searchValue}
		</if>
	</sql>
	
	<!-- 회의록 리스트 검색 -->
	<select id="proceedlist" parameterType="map" resultType="com.band.member.proceed.Proceed">
		SELECT * FROM (
		    SELECT ROWNUM rnum, tb.* FROM (
			     SELECT subject, TO_CHAR(proceedDate, 'YYYY-MM-DD') created, saveFilename
			        FROM proceedings p
			        JOIN community c ON p.groupURL = c.groupURL			        
                    <where>
                         <if test="searchValue != null and searchValue != ''">
			                  <include refid="where-list"/>
		                 </if>
	                </where>
	                ORDER BY proceedNo DESC
	<![CDATA[
	        ) tb WHERE ROWNUM <= #{end}
	    ) WHERE rnum >= #{start}
	]]>
	</select>
	
	<!-- 회의록 개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) FROM proceedings p
			JOIN community c ON p.groupURL = c.groupURL
		<where>
			<if test="searchValue != null and serachValue != '' ">
				<include refid="where-list" />
			</if>
		</where>
	</select>
	
	<!-- 회의록 읽기 -->
	<select id="readProceed" parameterType="Integer" resultType="com.band.member.proceed.Proceed">
		SELECT proceedNo, subject, content, created, place, attendee, saveFilename, OriginalFilename, note
			FROM proceedings p
			JOIN community c ON p.groupURL = c.groupURL
			WHERE proceedNo = #{proceedNo}
	</select>
	
	<!-- 회의록 수정 -->
	<update id="updateProceed" parameterType="com.band.member.proceed.Proceed">
		UPDATE proceedings SET subject = #{subject}, content = #{content}, saveFilename = #{saveFilename}
		WHERE proceedNo = #{proceedNo}	   
	</update>
	
	<!-- 회의록 삭제 -->
	<delete id="deleteProceed" parameterType="Integer">
		DELETE FROM proceedings WHERE proceedNo = #{proceedNo}
	</delete>
</mapper>